#include <iostream>
#include <string>
using namespace std;

const int MAX = 100; // Tama침o m치ximo de la lista

class empleado {
private:
    int clave;
    string nombre;
    string domicilio;
    float sueldo;
    string reportaA;
public:
    empleado(int _clave = 0, string _nombre = "", string _domicilio = "", float _sueldo = 0.0, string _reportaA = "")
        : clave(_clave), nombre(_nombre), domicilio(_domicilio), sueldo(_sueldo), reportaA(_reportaA) {}

    void imprime();
    void CambiaDomicilio(string);
    void CambiaReportaA(string);
    void ActualizarSueldo(float);

    int getClave() const { return clave; }

     empleado operator +(const empleado& otro) {
        float nuevoSalario = this->sueldo + otro.sueldo; // sobrecarga del operador +
        return empleado(this->clave, this->nombre + " & " + otro.nombre,
                        this->domicilio, nuevoSalario, this->reportaA);
    }

    bool operator==(const empleado& otro) const { return clave == otro.clave; }

    friend ostream& operator<<(ostream& os, const empleado& emp) {
        os << "Clave: " << emp.clave << ", Nombre: " << emp.nombre
           << ", Domicilio: " << emp.domicilio << ", Sueldo: " << emp.sueldo
           << ", Reporta a: " << emp.reportaA;
        return os;
    }
    bool operator<(const empleado& otro) const { //sobrecarga de <
        return this->sueldo < otro.sueldo;
    }
    bool operator>(const empleado& otro) const {  // Sobrecarga del operador >
        return this->sueldo > otro.sueldo;
    }
    bool operator!=(const empleado& otro) const { // compara que ambos sueldos sean diferentes
        return this->sueldo != otro.sueldo;
    }




    friend istream& operator>>(istream& is, empleado& emp) {
        cout << "Ingrese clave: ";
        is >> emp.clave;
        cout << "Ingrese nombre: ";
        is.ignore();
        getline(is, emp.nombre);
        cout << "Ingrese domicilio: ";
        getline(is, emp.domicilio);
        cout << "Ingrese sueldo: ";
        is >> emp.sueldo;
        cout << "Ingrese jefe a quien reporta: ";
        is.ignore();
        getline(is, emp.reportaA);
        return is;
 }

};


class ListaEstatica {
private:
    empleado datos[MAX];
    int tam;
public:
    ListaEstatica() : tam(0) {}

    int Inserta(empleado emp, int pos);
    int Agrega(empleado emp);
    int Busca(empleado emp);
    int Elimina(int clave);
    int Vacia();
    int Llena();
    int Muestra();
};

int ListaEstatica::Inserta(empleado emp, int pos) {
    if (Llena()) {
        cout << "La lista esta llena, no se puede insertar." << endl;
        return -1;
    }
    if (pos < 0 || pos > tam) {
        cout << "Posicion invalida." << endl;
        return -1;
    }
    for (int i = tam; i > pos; i--) {
        datos[i] = datos[i - 1]; // Desplazamiento de elementos a la derecha
    }
    datos[pos] = emp;
    tam++;
    return pos;
}

int ListaEstatica::Agrega(empleado emp) {
    if (Llena()) {
        cout << "La lista est치 llena, no se puede agregar." << endl;
        return -1;
    }
    datos[tam++] = emp;
    return tam - 1;
}

int ListaEstatica::Busca(empleado emp) {
    if (Vacia()) {
        cout << "La lista esta vacia." << endl;
        return -1;
    }
    for (int i = 0; i < tam; i++) {
        if (datos[i] == emp) {
            return i;
        }
    }
    cout << "Empleado no encontrado." << endl;
    return -1;
}

int ListaEstatica::Elimina(int clave) {
    if (Vacia()) {
        cout << "La lista esta vacia." << endl;
        return -1;
    }
    for (int i = 0; i < tam; i++) {
        if (datos[i].getClave() == clave) {
            for (int j = i; j < tam - 1; j++) {
                datos[j] = datos[j + 1]; // Desplazamiento de elementos a la izquierda
            }
            tam--;
            cout << "Empleado eliminado." << endl;
            return i;
        }
    }
    cout << "Empleado no encontrado." << endl;
    return -1;
}

int ListaEstatica::Vacia() {
    return tam == 0;
}

int ListaEstatica::Llena() {
    return tam == MAX;
}

int ListaEstatica::Muestra() {
    if (Vacia()) {
        cout << "La lista esta vacia." << endl;
        return -1;
    }
    for (int i = 0; i < tam; i++) {
        cout << "Posicion: " << i << " - " << datos[i] << endl;
    }
    return 0;
}

int main() {
    ListaEstatica lista;
    int opcion;
    empleado emp;
    int clave, pos;

    do {
        cout << "\nMenu" << endl;
        cout << "1. Agrega" << endl;
        cout << "2. Buscar" << endl;
        cout << "3. Elimina" << endl;
        cout << "4. Inserta" << endl;
        cout << "5. Muestra" << endl;
        cout << "6. Salir" << endl;
        cout << "Digite un numero: ";
        cin >> opcion;

        switch(opcion) {
            case 1:
                cin >> emp;
                lista.Agrega(emp);
                break;
            case 2:
                cin >> emp;
                pos = lista.Busca(emp);
                if (pos != -1) cout << "Empleado encontrado en la posicion " << pos << endl;
                break;
            case 3:
                cout << "Dame la clave del empleado a eliminar: ";
                cin >> clave;
                lista.Elimina(clave);
                break;
            case 4:
                cin >> emp;
                cout << "Dame la posicion donde se debe insertar el Empleado: ";
                cin >> pos;
                lista.Inserta(emp, pos);
                break;
            case 5:
                lista.Muestra();
                break;
            case 6:
                cout << "Hasta luego" << endl;
                break;
            default:
                cout << "Opci칩n no valida." << endl;
        }
    } while(opcion != 6);

    return 0;
}

void empleado::imprime() {
    cout << "Clave: " << clave << endl;
    cout << "Nombre: " << nombre << endl;
    cout << "Domicilio: " << domicilio << endl;
    cout << "Sueldo: " << sueldo << endl;
    cout << "Reporta a: " << reportaA << endl;
}

void empleado::CambiaDomicilio(string nuevoDomicilio) {
    cout << "Dame el nuevo domicilio: ";
    cin >> nuevoDomicilio;
    domicilio = nuevoDomicilio;
    cout << "Domicilio cambiado." << endl;
}

void empleado::CambiaReportaA(string nuevoReportaA) {
    cout << "Dame el nuevo jefe a quien reporta: ";
    cin >> nuevoReportaA;
    reportaA = nuevoReportaA;
    cout << "Jefe cambiado." << endl;
}

void empleado::ActualizarSueldo(float sueldo2) {
    cout << "Dame el nuevo sueldo: ";
    cin >> sueldo2;
    sueldo = sueldo2;
    cout << "Sueldo actualizado." << endl;
}
